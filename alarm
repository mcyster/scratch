#!/usr/bin/env python
"""
Adafruit USB tower light w/alarm
"""

import serial
import time
import argparse
from enum import Enum
from flask import Flask, request, jsonify

serialPort = 'COM57'  # Change to the serial/COM port of the tower light
#serialPort = '/dev/USBserial0'  # on mac/linux, it will be a /dev path
baudRate = 9600

class AlarmOperation(Enum):
  ON = 0x10
  OFF = 0x20
  BLINK = 0x40

class AlarmMode(Enum):
  RED = 0x01
  YELLOW = 0x02
  GREEN = 0x04
  BUZZER = 0x08

class Alarm:
  def __init__(self, port = "/dev/ttyUSB0", baudRate = 9600): 
    self._serial = serial.Serial(port, baudRate)

  def sendCommand(self, mode, operation):
    command = operation.value | mode.value

    if self._serial is None:
      print("serial command:", hex(command))
    else:
      self._serial.write(bytes([command]))

  def off(self):
    self.sendCommand(AlarmMode.RED, AlarmOperation.OFF)
    self.sendCommand(AlarmMode.YELLOW, AlarmOperation.OFF)
    self.sendCommand(AlarmMode.GREEN, AlarmOperation.OFF)
    self.sendCommand(AlarmMode.BUZZER, AlarmOperation.OFF)

  def __enter__(self):
    #self._serial = serial.Serial(serialPort, baudRate)
    return self
    
  def __exit__(self, type, value, traceback):
    if self._serial is None:
        print("serial closed")
    else:    
      self._serial.close()

with Alarm() as alarm:
  alarm.off()

app = Flask(__name__)
app.secret_key = 's3cr3t'
app.config['SESSION_TYPE'] = 'filesystem'

def post_action(mode, request):
  data = {}
  if request.content_length is not None and request.content_length > 0:
    data = request.get_json()
  operation = AlarmOperation.ON
  if 'operation' in data:
    if data['operation'].lower() == 'off':
      operation = AlarmOperation.OFF

  with Alarm() as alarm:
    alarm.sendCommand(mode, operation)

  return jsonify({ "mode": str(mode), "operation": str(operation) })

@app.route('/green', methods=['POST'])
def green():
  return post_action(AlarmMode.GREEN, request)

@app.route('/yellow', methods=['POST'])
def yellow():
  return post_action(AlarmMode.YELLOW, request)

@app.route('/red', methods=['POST'])
def red():
  return post_action(AlarmMode.RED, request)

@app.route('/off', methods=['POST'])
def off():
  with Alarm() as alarm:
    alarm.off()
  return jsonify({})

class Action:
  def __init__(self):
    pass

class AlarmAction(Action):
  def __init__(self, mode, operation):
    super().__init__()
    self._mode = mode
    self._operation = operation

  def perform(self, alarm):
    with Alarm() as alarm:
      alarm.sendCommand(self._mode, self._operation)

class AlarmOffAction(Action):
  def __init__(self):
    super().__init__()

  def perform(self, alarm):
    alarm.off()

class DelayAction(Action):
  def __init__(self, delay):
    super().__init__()
    self._delay = delay

  def perform(self, alarm):
    time.sleep(self._delay)

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('sequence', help='Sequence to perform: RrGgYyoN R red on, N delay seconds', nargs="?", default='')
  parser.add_argument('--device', help='Device to which Alarm is attached', default='/dev/ttyUSB0')
  parser.add_argument('--red', help='Red LED', default='off')
  parser.add_argument('--yellow', help='Yellow LED', default='off')
  parser.add_argument('--green', help='Green LED', default='off')
  parser.add_argument('--buzzer', help='Buzzer', default='off')
  parser.add_argument('--web', help='Start web server', action='store_true', default=False)

  args = parser.parse_args()

  sequence = []
  if args.red:
    if args.red.lower() == "on":
      sequence.append(AlarmAction(AlarmMode.RED, AlarmOperation.ON))
    else:
      sequence.append(AlarmAction(AlarmMode.RED, AlarmOperation.OFF))

    if args.yellow.lower() == "on":
      sequence.append(AlarmAction(AlarmMode.YELLOW, AlarmOperation.ON))
    else:
      sequence.append(AlarmAction(AlarmMode.YELLOW, AlarmOperation.OFF))

    if args.green.lower() == "on":
      sequence.append(AlarmAction(AlarmMode.GREEN, AlarmOperation.ON))
    else:
      sequence.append(AlarmAction(AlarmMode.GREEN, AlarmOperation.OFF))

    if args.buzzer.lower() == "on":
      sequence.append(AlarmAction(AlarmMode.BUZZER, AlarmOperation.ON))
    else:
      sequence.append(AlarmAction(AlarmMode.BUZZER, AlarmOperation.OFF))

  for character in args.sequence:
    if character == 'R':
      sequence.append(AlarmAction(AlarmMode.RED, AlarmOperation.ON))
    elif character == 'r':
      sequence.append(AlarmAction(AlarmMode.RED, AlarmOperation.OFF))
    elif character == 'Y':
      sequence.append(AlarmAction(AlarmMode.YELLOW, AlarmOperation.ON))
    elif character == 'y':
      sequence.append(AlarmAction(AlarmMode.YELLOW, AlarmOperation.OFF))
    elif character == 'G':
      sequence.append(AlarmAction(AlarmMode.GREEN, AlarmOperation.ON))
    elif character == 'g':
      sequence.append(AlarmAction(AlarmMode.GREEN, AlarmOperation.OFF))
    elif character == 'B':
      sequence.append(AlarmAction(AlarmMode.BUZZER, AlarmOperation.ON))
    elif character == 'b':
      sequence.append(AlarmAction(AlarmMode.BUZZER, AlarmOperation.OFF))
    elif character == 'o':
      sequence.append(AlarmOffAction())
    elif character.isdigit():
      sequence.append(DelayAction(int(character)))

  with Alarm() as alarm:
    for action in sequence:
      action.perform(alarm)

  if args.web:
    app.run(host='0.0.0.0')

if __name__ == '__main__':
  main()
