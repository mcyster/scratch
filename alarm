#!/usr/bin/env python
"""
Example for Adafruit USB tower light w/alarm
don't forge to  or .gitignore
"""

import serial
import time
from enum import Enum
from flask import Flask, request, jsonify

serialPort = 'COM57'  # Change to the serial/COM port of the tower light
#serialPort = '/dev/USBserial0'  # on mac/linux, it will be a /dev path
baudRate = 9600

class AlarmOperation(Enum):
  ON = 0x10
  OFF = 0x20
  BLINK = 0x40

class AlarmMode(Enum):
  RED = 0x01
  YELLOW = 0x02
  GREEN = 0x04
  BUZZER = 0x08

class Alarm:
  def __init__(self, port = "/dev/ttyUSB0", baudRate = 9600): 
    self._serial = serial.Serial(port, baudRate)

  def sendCommand(self, mode, operation):
    command = operation.value | mode.value

    if self._serial is None:
      print("serial command:", hex(command))
    else:
      self._serial.write(bytes([command]))

  def off(self):
    self.sendCommand(AlarmMode.RED, AlarmOperation.OFF)
    self.sendCommand(AlarmMode.YELLOW, AlarmOperation.OFF)
    self.sendCommand(AlarmMode.GREEN, AlarmOperation.OFF)
    self.sendCommand(AlarmMode.BUZZER, AlarmOperation.OFF)

  def __enter__(self):
    #self._serial = serial.Serial(serialPort, baudRate)
    return self
    
  def __exit__(self, type, value, traceback):
    if self._serial is None:
        print("serial closed")
    else:    
      self._serial.close()

with Alarm() as alarm:
  alarm.off()

app = Flask(__name__)
app.secret_key = 's3cr3t'
app.config['SESSION_TYPE'] = 'filesystem'

def post_action(mode, request):
  data = {}
  if request.content_length is not None and request.content_length > 0:
    data = request.get_json()
  operation = AlarmOperation.ON
  if 'operation' in data:
    if data['operation'].lower() == 'off':
      operation = AlarmOperation.OFF

  with Alarm() as alarm:
    alarm.sendCommand(mode, operation)

  return jsonify({ "mode": str(mode), "operation": str(operation) })

@app.route('/green', methods=['POST'])
def green():
  return post_action(AlarmMode.GREEN, request)

@app.route('/yellow', methods=['POST'])
def yellow():
  return post_action(AlarmMode.YELLOW, request)

@app.route('/red', methods=['POST'])
def red():
  return post_action(AlarmMode.RED, request)

@app.route('/off', methods=['POST'])
def off():
  with Alarm() as alarm:
    alarm.off()
  return jsonify({})

if __name__ == '__main__':
  app.run(host='0.0.0.0')

